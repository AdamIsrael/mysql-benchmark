#!/bin/bash

set -eux

maxprime=`action-get max-prime`
threads=`action-get num-threads`

requests=`action-get max-requests`
maxtime=`action-get max-time`

# This is a bit of a hack, since requests is a string (a bug workaround)
# and won't accept a 0 value
if [ maxtime > 0 ]; then
    requests=0
fi

stacksize=`action-get thread-stack-size`
rnd=`action-get init-rnd`

testmode=`action-get test-mode`
readonly=`action-get read-only`
rangesize=`action-get range-size`
pointselects=`action-get point-selects`
simpleranges=`action-get simple-ranges`
sumranges=`action-get sum-ranges`
orderranges=`action-get order-ranges`
distinctranges=`action-get distinct-ranges`
indexupdates=`action-get index-updates`
nonindexupdates=`action-get non-index-updates`
nontrxmode=`action-get nontrx-mode`
connectdelay=`action-get connect-delay`
userdelaymin=`action-get user-delay-min`
userdelaymax=`action-get user-delay-max`
tablename=`action-get table-name`
tablesize=`action-get table-size`
tablecount=`action-get tables-count`
disttype=`action-get dist-type`
distpct=`action-get dist-pct`
distres=`action-get dist-res`
dbpsmode=`action-get db-ps-mode`
##
mysqltableengine=`action-get mysql-table-engine`
myisammaxrows=`action-get myisam-max-rows`
mysqlcreateoptions=`action-get mysql-create-options`

##
cleanup=`action-get cleanup`
prepare=`action-get prepare`

database=`cat .juju-persistent-config | shyaml get-value database`
host=`cat .juju-persistent-config | shyaml get-value host`
user=`cat .juju-persistent-config | shyaml get-value user`
password=`cat .juju-persistent-config | shyaml get-value password`


run=`date +%s`

mkdir -p /opt/sysbench/oltp/results/$run

# This is the only percona-specific sysbench test that needs to be changed
# but there may be some percona-only tests to add in the future.
TESTNAME=oltp
. actions/common

#if is_percona; then
TESTNAME=/usr/share/doc/sysbench/tests/db/oltp.lua
#fi

cleanup() {
    sysbench --test=${TESTNAME} --mysql-host=${host} --mysql-user=${user} \
    --oltp-tables-count=${tablecount} \
    --mysql-db=${database} --mysql-password=${password} cleanup
}

# Prepare the test
if [ ${prepare,,} = 'true' ]; then
    # Always cleanup before a prepare
    cleanup || true

    sysbench --test=${TESTNAME} --mysql-host=${host} --mysql-user=${user} \
--oltp-table-size=${tablesize} --oltp-tables-count=${tablecount} \
--mysql-db=${database} --mysql-password=${password} prepare
fi

# Run the test
benchmark-start

time sysbench --num-threads=${threads} --test=${TESTNAME} \
--oltp-test-mode=${testmode} --oltp-read-only=${readonly} \
--oltp-range-size=${rangesize} --oltp-point-selects=${pointselects} \
--oltp-simple-ranges=${simpleranges} --oltp-sum-ranges=${sumranges} \
--oltp-order-ranges=${orderranges} --oltp-distinct-ranges=${distinctranges} \
--oltp-index-updates=${indexupdates} \
--oltp-non-index-updates=${nonindexupdates} --oltp-nontrx-mode=${nontrxmode} \
--oltp-connect-delay=${connectdelay} --oltp-user-delay-min=${userdelaymin} \
--oltp-user-delay-max=${userdelaymax} --oltp-table-name=${tablename} \
--oltp-table-size=${tablesize} --oltp-dist-type=${disttype} \
--oltp-tables-count=${tablecount} \
--oltp-dist-pct=${distpct} --oltp-dist-res=${distres} --db-ps-mode=${dbpsmode} \
--mysql-host=${host} --mysql-user=${user} --mysql-db=${database} \
--mysql-password=${password} --mysql-table-engine=${mysqltableengine} \
--myisam-max-rows=${myisammaxrows} \
--mysql-create-options=${mysqlcreateoptions} \
run > /opt/sysbench/oltp/results/$run/sysbench.log

benchmark-finish || true

# Cleanup after the test
if [ ${cleanup,,} = 'true' ]; then
    cleanup || true
fi

# Log the raw results
benchmark-raw /opt/sysbench/oltp/results/$run/sysbench.log

# Parse and log the results in a human-readable format
`cat /opt/sysbench/oltp/results/$run/sysbench.log | python $CHARM_DIR/actions/oltp2json.py`
